# coding=utf-8

import os
from os.path import join, dirname, exists
import multiprocessing

from gunicorn.config import KNOWN_SETTINGS
from gunicorn.app.base import Application
from gunicorn.util import import_app

from guniflask.utils.config import load_config, load_profile_config, walk_files, load_app_config

conf_dir = os.environ['GUNIFLASK_CONF_DIR']
pid_dir = os.environ['GUNIFLASK_PID_DIR']
log_dir = os.environ['GUNIFLASK_LOG_DIR']
id_string = os.environ['GUNIFLASK_ID_STRING']


def make_profile_options(active_profiles):
    gc = load_config(join(conf_dir, 'gunicorn.py'))
    gc.update(load_profile_config(conf_dir, 'gunicorn', profiles=active_profiles))
    settings = {}
    snames = set([i.name for i in KNOWN_SETTINGS])
    for name in gc:
        if name in snames:
            settings[name] = gc[name]
    return settings


def make_debug_options():
    return {
        'accesslog': '-',
        'errorlog': '-',
        'loglevel': 'debug',
        'disable_redirect_access_to_syslog': True,
        'reload': True,
        'reload_extra_files': walk_files(conf_dir),
        'workers': 1,
        'daemon': False
    }


def makedirs(opts):
    for c in ['pidfile', 'accesslog', 'errorlog']:
        p = opts.get(c)
        if p:
            d = dirname(p)
            if d and not exists(d):
                os.makedirs(d)


class GunicornApplication(Application):
    def __init__(self, app, options=None):
        self.options = options or {}
        self.app = app
        super().__init__()

    def load_config(self):
        for key, value in self.options.items():
            if key in self.cfg.settings and value is not None:
                self.cfg.set(key.lower(), value)

    def load(self):
        return import_app(self.app)


options = {
    'daemon': True,
    'workers': multiprocessing.cpu_count(),
    'worker_class': 'gevent',
    'pidfile': join(pid_dir, '{{project__name}}-' + id_string + '.pid'),
    'accesslog': join(log_dir, '{{project__name}}-' + id_string + '.access.log'),
    'errorlog': join(log_dir, '{{project__name}}-' + id_string + '.error.log')
}

settings = load_app_config('{{project_name}}')
options.update(make_profile_options(settings['active_profiles']))
# if debug
if settings['debug']:
    options.update(make_debug_options())
makedirs(options)

application = GunicornApplication('{{project_name}}:create_app()', options=options)
