# coding=utf-8

import logging

from flask import Flask, Blueprint, has_app_context, current_app
from flask_sqlalchemy import SQLAlchemy

from guniflask.utils.config import walk_modules, load_app_config
from guniflask.utils.logging import redirect_app_logger, redirect_logger

from {{project_name}}.utils import model_to_dict, dict_to_model

log = logging.getLogger(__name__)


class ConfigProxy:
    @property
    def settings(self):
        if has_app_context():
            return current_app.config(['GUNIFLASK_SETTINGS'])
        return load_app_config('{{project_name}}')


config = ConfigProxy()

db = SQLAlchemy()
db.Model.to_dict = lambda self: model_to_dict(self)
db.Model.from_dict = lambda self, d: dict_to_model(d, self.__class__)


def set_app_config(app, settings):
    from {{project_name}} import hooks

    for k, v in settings.items():
        if k.isupper():
            app.config[k] = v
    make_settings = getattr(hooks, 'make_settings', None)
    if make_settings:
        make_settings(app, settings)
    app.config['GUNIFLASK_SETTINGS'] = settings
    log.info('{{project_name}} active profiles: %s', settings['active_profiles'])


def init_app(app, settings):
    # CORS
    if settings['cors']:
        try:
            from flask_cors import CORS
            if isinstance(settings['cors'], dict):
                CORS(app, **settings['cors'])
            else:
                CORS(app)
        except (ModuleNotFoundError, ImportError) as e:
            log.error('Failed to set CORS: %s', e)

    # database configuration
    if 'SQLALCHEMY_DATABASE_URI' in app.config:
        try:
            from {{project_name}} import db
            db.init_app(app)
        except (ModuleNotFoundError, ImportError) as e:
            log.error('Failed to set database: %s', e)


def register_blueprints(app):
    def iter_blueprints():
        for module in walk_modules('{{project_name}}.blueprints'):
            for obj in vars(module).values():
                if isinstance(obj, Blueprint):
                    yield obj

    for b in iter_blueprints():
        app.register_blueprint(b)


def create_app():
    app = Flask(__name__)
    gunicorn_logger = logging.getLogger('gunicorn.error')
    redirect_app_logger(app, gunicorn_logger)
    redirect_logger('{{project_name}}', gunicorn_logger)
    register_blueprints(app)
    settings = config.settings
    set_app_config(app, settings)
    init_app(app, settings)
    return app
