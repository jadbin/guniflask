# coding=utf-8

import logging

from flask import Flask, Blueprint
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

from guniflask.config import ConfigProxy
from guniflask.utils.config import walk_modules
from guniflask.utils.logging import redirect_app_logger, redirect_logger
from guniflask.utils.model import model_to_dict, dict_to_model, update_model_by_dict

log = logging.getLogger(__name__)

config = ConfigProxy()

db = SQLAlchemy()
db.Model.to_dict = lambda self, **kwargs: model_to_dict(self, **kwargs)
db.Model.from_dict = classmethod(lambda cls, dict_obj, **kwargs: dict_to_model(dict_obj, model_cls=cls, **kwargs))
db.Model.update_by_dict = lambda self, dict_obj, **kwargs: update_model_by_dict(self, dict_obj, **kwargs)


def set_app_config(app):
    config.init_app(app)
    for k, v in config.settings.items():
        if k.isupper():
            app.config[k] = v

    from {{project_name}} import hooks

    _make_settings = getattr(hooks, 'make_settings', None)
    if _make_settings:
        _make_settings(app, config.settings)

    log.info('{{project_name}} active profiles: %s', config.settings['active_profiles'])


def init_app(app):
    # CORS
    if config.settings['cors']:
        if isinstance(config.settings['cors'], dict):
            CORS(app, **config.settings['cors'])
        else:
            CORS(app)

    # database configuration
    if 'SQLALCHEMY_DATABASE_URI' in app.config:
        db.init_app(app)

    from {{project_name}} import hooks

    _init_app = getattr(hooks, 'init_app', None)
    if _init_app:
        _init_app(app, config.settings)


def register_blueprints(app):
    def iter_blueprints():
        for module in walk_modules('{{project_name}}'):
            for obj in vars(module).values():
                if isinstance(obj, Blueprint):
                    yield obj

    for b in iter_blueprints():
        app.register_blueprint(b)


def create_app():
    app = Flask('{{project_name}}')
    gunicorn_logger = logging.getLogger('gunicorn.error')
    redirect_app_logger(app, gunicorn_logger)
    redirect_logger('{{project_name}}', gunicorn_logger)
    register_blueprints(app)
    set_app_config(app)
    init_app(app)
    return app
