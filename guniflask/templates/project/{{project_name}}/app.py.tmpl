# coding=utf-8

import logging

from flask import Flask, Blueprint
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

from guniflask.config import ConfigProxy
from guniflask.utils.config import walk_modules, set_app_config_from_environ
from guniflask.utils.logging import redirect_app_logger, redirect_logger
from guniflask.utils.model import inject_sqlalchemy_model

log = logging.getLogger(__name__)

config = ConfigProxy()

db = SQLAlchemy()
inject_sqlalchemy_model(db.Model)


def set_app_config(app):
    set_app_config_from_environ(app)
    settings = config.init_app(app)
    for k, v in settings.items():
        if k.isupper():
            app.config[k] = v

    from {{project_name}} import hooks

    _make_settings = getattr(hooks, 'make_settings', None)
    if _make_settings:
        _make_settings(app, settings)

    log.info('{{project_name}} active profiles: %s', settings['active_profiles'])
    return settings


def init_app(app, settings):
    # CORS
    if settings['cors']:
        if isinstance(settings['cors'], dict):
            CORS(app, **settings['cors'])
        else:
            CORS(app)

    # database configuration
    if 'SQLALCHEMY_DATABASE_URI' in app.config:
        db.init_app(app)

    from {{project_name}} import hooks

    _init_app = getattr(hooks, 'init_app', None)
    if _init_app:
        _init_app(app, settings)


def register_blueprints(app):
    def iter_blueprints():
        for module in walk_modules('{{project_name}}'):
            for obj in vars(module).values():
                if isinstance(obj, Blueprint):
                    yield obj

    for b in iter_blueprints():
        app.register_blueprint(b)


def create_app():
    app = Flask('{{project_name}}')
    gunicorn_logger = logging.getLogger('gunicorn.error')
    redirect_app_logger(app, gunicorn_logger)
    redirect_logger('{{project_name}}', gunicorn_logger)
    register_blueprints(app)
    settings = set_app_config(app)
    init_app(app, settings)
    return app
