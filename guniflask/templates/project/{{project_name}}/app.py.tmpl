# coding=utf-8

import os
import logging

from flask import Flask, Blueprint, current_app
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

from werkzeug.local import LocalProxy

from guniflask.config import Config
from guniflask.utils.config import walk_modules
from guniflask.utils.logging import redirect_app_logger, redirect_logger
from guniflask.utils.model import inject_sqlalchemy_model

log = logging.getLogger(__name__)

config = Config()
settings = LocalProxy(lambda: current_app.extensions['settings'])

db = SQLAlchemy()
inject_sqlalchemy_model(db.Model)

environ_config_attrs = ['GUNIFLASK_HOME',
                        'GUNIFLASK_CONF_DIR',
                        'GUNIFLASK_ACTIVE_PROFILES',
                        'GUNIFLASK_DEBUG']

app_default_settings = {
    'debug': False,
    'cors': True,
    # Flask-SQLAlchemy
    'SQLALCHEMY_TRACK_MODIFICATIONS': False
}


def set_app_config(app):
    for c in environ_config_attrs:
        app.config[c] = os.environ.get(c)
    config.init_app(app)
    s = app.extensions['settings']
    for k, v in app_default_settings.items():
        s.setdefault(k, v)

    from {{project_name}} import hooks

    _make_settings = getattr(hooks, 'make_settings', None)
    if _make_settings:
        _make_settings(app, s)

    for k, v in s.items():
        if k.isupper():
            app.config[k] = v

    log.info('{{project_name}} active profiles: %s', s['active_profiles'])


def init_app(app):
    s = app.extensions['settings']

    # CORS
    if s['cors']:
        if isinstance(s['cors'], dict):
            CORS(app, **s['cors'])
        else:
            CORS(app)

    # database configuration
    if 'SQLALCHEMY_DATABASE_URI' in app.config:
        db.init_app(app)

    from {{project_name}} import hooks

    _init_app = getattr(hooks, 'init_app', None)
    if _init_app:
        _init_app(app, s)


def register_blueprints(app):
    def iter_blueprints():
        for module in walk_modules('{{project_name}}'):
            for obj in vars(module).values():
                if isinstance(obj, Blueprint):
                    yield obj

    for b in iter_blueprints():
        app.register_blueprint(b)


def create_app():
    app = Flask('{{project_name}}')
    gunicorn_logger = logging.getLogger('gunicorn.error')
    redirect_app_logger(app, gunicorn_logger)
    redirect_logger('{{project_name}}', gunicorn_logger)
    register_blueprints(app)
    set_app_config(app)
    init_app(app)
    return app
